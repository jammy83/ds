{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
{\field{\*\fldinst{HYPERLINK "https://github.com/andreis/interview"}}{\fldrslt https://github.com/andreis/interview}}\
\
\
\
Useful Links:\
\
General:\
* {\field{\*\fldinst{HYPERLINK "http://algs4.cs.princeton.edu/home/"}}{\fldrslt http://algs4.cs.princeton.edu/home/}}\
* {\field{\*\fldinst{HYPERLINK "http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html"}}{\fldrslt http://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 * {\field{\*\fldinst{HYPERLINK "http://www.hiredintech.com/algorithm-design/learn-algorithms#dynamic"}}{\fldrslt http://www.hiredintech.com/algorithm-design/learn-algorithms#dynamic}}\
* {\field{\*\fldinst{HYPERLINK "http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/"}}{\fldrslt 
\f1\fs22 http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/}}
\f1\fs22 \

\f0\fs24 * {\field{\*\fldinst{HYPERLINK "http://kartikkukreja.wordpress.com"}}{\fldrslt 
\f1\fs22 http://kartikkukreja.wordpress.com}}
\f1\fs22 \

\f0\fs24 * {\field{\*\fldinst{HYPERLINK "http://noteworthyalgorithms.blogspot.com"}}{\fldrslt 
\f1\fs22 http://noteworthyalgorithms.blogspot.com}}
\f1\fs22 \

\f0\fs24 * {\field{\*\fldinst{HYPERLINK "http://aleph.nu/blog/kth-smallest-in-sorted-union.html"}}{\fldrslt 
\f1\fs22 http://aleph.nu/blog/kth-smallest-in-sorted-union.html}}
\f1\fs22 \

\f0\fs24 * {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Dutch_national_flag_problem"}}{\fldrslt 
\f1\fs22 http://en.wikipedia.org/wiki/Dutch_national_flag_problem}}
\f1\fs22 \cf2 \CocoaLigature0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 * {\field{\*\fldinst{HYPERLINK "https://www.cs.berkeley.edu/~jrs/61b/lec/25"}}{\fldrslt 
\f1\fs22 \cf2 \CocoaLigature0 https://www.cs.berkeley.edu/~jrs/61b/lec/25}}
\f1\fs22 \cf2 \CocoaLigature0 \

\f0\fs24 \cf0 \CocoaLigature1 * {\field{\*\fldinst{HYPERLINK "http://edusagar.com/articles/view/70/What-happens-when-you-type-a-URL-in-browser"}}{\fldrslt http://edusagar.com/articles/view/70/What-happens-when-you-type-a-URL-in-browser}}\
*** DNS - load balancing(across data center.. within data center, get a load balancer which does it based on various other heuristics), TTL/expiry on the result, caching at the browser, OS, cookies for storing session data or keep the session data and everything in a separate database server.. caching is very important as well.. store static html content than dynamic content..auto-scaling, sharding, de-normalization\
storing per-session data: if the client is a browser, then URL re-writing/cookies else use shared database with replicas\
Caching - in-memory memcached\
\
STL:\
* {\field{\*\fldinst{HYPERLINK "https://www.topcoder.com/community/data-science/data-science-tutorials/power-up-c-with-the-standard-template-library-part-1/"}}{\fldrslt https://www.topcoder.com/community/data-science/data-science-tutorials/power-up-c-with-the-standard-template-library-part-1/}}\
* STL maps, sets are stored as red-black trees; the elements are stored in an ascending order. Never update the keys.\
* #include<algorithms> contains some std. algos including min(),max(),find(),swap(),sort()..\
\
Data Structure:\
* {\field{\*\fldinst{HYPERLINK "http://en.wikipedia.org/wiki/Double-ended_queue#Applications"}}{\fldrslt http://en.wikipedia.org/wiki/Double-ended_queue#Applications}}\
\
OS\
* {\field{\*\fldinst{HYPERLINK "http://web.stanford.edu/class/cs140/cgi-bin/lectures.php"}}{\fldrslt http://web.stanford.edu/class/cs140/cgi-bin/lectures.php}}\
* malloc: {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/sp2012/lectures/08-malloc.pdf"}}{\fldrslt https://courses.engr.illinois.edu/cs241/sp2012/lectures/08-malloc.pdf}}\
* OS internals: {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/sp2012/"}}{\fldrslt https://courses.engr.illinois.edu/cs241/sp2012/}}\
\
* Process vs threads: {\field{\*\fldinst{HYPERLINK "https://courses.engr.illinois.edu/cs241/sp2012/lectures/15-pthreads.pdf"}}{\fldrslt https://courses.engr.illinois.edu/cs241/sp2012/lectures/15-pthreads.pdf}}\
* threads: {\field{\*\fldinst{HYPERLINK "http://randu.org/tutorials/threads/"}}{\fldrslt http://randu.org/tutorials/threads/}}\
** On fork(), the child process gets a copy of the memory segments of the parent process; though it is copy-on-write: parent and child processes' virtual memory map to the same physical memory which gets actually copied when one of them actually makes a write.\
** 1:1 mapping between user and kernel threads mostly -- \
** clone() system call - creates a copy of the calling process where the callee shares the address space with the caller and this is used to implement threads. Though, users invoke it with the pthreads API. Processes are the scheduleable entities and no special handling for threads.\
** User/kernel and hardware threads\
** Each physical core can offer more than one hardware thread/logical processor that runs the software threads supporting multi-threading or only support one logical core/processor per physical core.\
** Consider thread context switching as well as too many threads may not result in good performance. Probably have as many worker threads as the no. of hardware threads.\
** Process context switch time: ~30microsecs\
\
*Memory: {\field{\*\fldinst{HYPERLINK "http://www.akkadia.org/drepper/cpumemory.pdf"}}{\fldrslt http://www.akkadia.org/drepper/cpumemory.pdf}}\
\
*Stack vs heap: {\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap"}}{\fldrslt http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap}}\
                    {\field{\*\fldinst{HYPERLINK "http://programmers.stackexchange.com/questions/207386/how-are-the-size-of-the-stack-and-heap-limited-by-the-os"}}{\fldrslt http://programmers.stackexchange.com/questions/207386/how-are-the-size-of-the-stack-and-heap-limited-by-the-os}}\
\
*SSL/TLS vs IPSec: {\field{\*\fldinst{HYPERLINK "http://www.k2esec.com/secure-communications/network-security-protocols-ipsec-vs-tlsssl-vs-ssh-part-ii"}}{\fldrslt http://www.k2esec.com/secure-communications/network-security-protocols-ipsec-vs-tlsssl-vs-ssh-part-ii}}\
\
Base32/base64 encoding: {\field{\*\fldinst{HYPERLINK "http://code.tutsplus.com/tutorials/base-what-a-practical-introduction-to-base-encoding--net-27590"}}{\fldrslt http://code.tutsplus.com/tutorials/base-what-a-practical-introduction-to-base-encoding--net-27590}}\
\
C++: {\field{\*\fldinst{HYPERLINK "http://stroustrup.com/bs_faq2.html"}}{\fldrslt http://stroustrup.com/bs_faq2.html}}\
\
Structure padding: {\field{\*\fldinst{HYPERLINK "http://www.catb.org/esr/structure-packing/"}}{\fldrslt http://www.catb.org/esr/structure-packing/}}\
*structure aligned to its widest scalar member\
*re-order by decreasing alignment: widest scalar first..\
*padding is something the complier adds to keep the types/structure self-aligned. Packing is to eliminate the padding. __attribute__packed\
*cache lines is about 32/64 bytes fetch. Grouping related and co-accessed data will improve cache-line locality.\
*Cache line bouncing might be a problem when multiple threads are involved accessing the co-located fields that are individually being modified by different threads.\
\
Distributed Systems/Scalability:\
* {\field{\*\fldinst{HYPERLINK "https://github.com/henryr/cap-faq"}}{\fldrslt https://github.com/henryr/cap-faq}}\
* {\field{\*\fldinst{HYPERLINK "http://the-paper-trail.org/blog/"}}{\fldrslt http://the-paper-trail.org/blog/}}\
*LRU Cache: {\field{\*\fldinst{HYPERLINK "http://timday.bitbucket.org/lru.html"}}{\fldrslt http://timday.bitbucket.org/lru.html}}\
*Scalability: {\field{\*\fldinst{HYPERLINK "http://www.hiredintech.com/system-design/scalability-fundamentals/"}}{\fldrslt http://www.hiredintech.com/system-design/scalability-fundamentals/}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://www.lecloud.net/tagged/scalability"}}{\fldrslt \cf0 http://www.lecloud.net/tagged/scalability}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "http://codefutures.com/database-sharding"}}{\fldrslt \cf0 http://codefutures.com/database-sharding}}/\
\
System design:\
OOPS: Design Patterns: {\field{\*\fldinst{HYPERLINK "https://sourcemaking.com/design-patterns-and-tips"}}{\fldrslt https://sourcemaking.com/design-patterns-and-tips}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
{\field{\*\fldinst{HYPERLINK "https://github.com/checkcheckzz/system-design-interview"}}{\fldrslt \cf0 https://github.com/checkcheckzz/system-design-interview}}\
\
\
\
\
}